snippet ns "namespace form"
`!p

import os

snip.rv = ''

start = 0
# ultisnips sets the current path as the 'path' variable
requires = []
if path.find("src") >= 0:
    start = path.rfind("src/") + len("src/")
elif path.find("test") >= 0:
    start = path.rfind("test/") + len("test/")
    requires = ["[clojure.test :refer [deftest testing is use-fixtures]]"]
end = path.find(".")

reqstr = ""
if requires:
    reqstr = "\n (:require {})".format(
        "\n           ".join(requires),
    )

snip.rv = """(ns {}{})
""".format(
    path[start:end].replace("/", ".").replace("_", "-"),
    reqstr,
)
`
$0
endsnippet

snippet req "require form"
(:require $0)
endsnippet

snippet imp "import form"
(:import $0)
endsnippet

snippet com "a comment"
(comment

  $0

  )
endsnippet

snippet defp "private def"
(def ^:private $0)
endsnippet

snippet defn "defn"
(defn $1
  [$2]
  $3)
$0
endsnippet



snippet test "clojure.test deftest"
(deftest $1
  (testing "$2"
    (is (= 2 3))))
endsnippet

snippet xform "transducer function"
(defn $1
  []
  (fn [xf]
    (fn
      ([] (xf))
      ([result] (xf result))
      ([result input]
       (xf result input)))))
endsnippet

snippet proto "protocol"
(defprotocol $1
  $0)
endsnippet

snippet comp "component"
(defn create
  [this]
  (with-meta this {\`component/start identity \`component/stop identity}))
endsnippet
